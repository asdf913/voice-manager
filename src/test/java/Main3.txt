import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Objects;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.Mixer;
import javax.sound.sampled.Mixer.Info;
import javax.sound.sampled.TargetDataLine;

import org.apache.commons.io.FileUtils;
import org.vosk.Model;

public class Main3 {

	public static void main(String[] args) throws LineUnavailableException, IOException {
		// TODO Auto-generated method stub
		Info[] mixerInfos = AudioSystem.getMixerInfo();
		for (int i = 0; mixerInfos != null && i < mixerInfos.length; i++) {
			if (mixerInfos[i] != null
					&& Objects.equals("Internal Microphone (Conexant ISST Audio)", mixerInfos[i].getName())) {

				System.out.println(mixerInfos[i].getName());
				Mixer mixer = AudioSystem.getMixer(mixerInfos[i]);

				AudioFormat format = new AudioFormat(8000.0f, 16, 1, true, true);
				TargetDataLine microphone = AudioSystem.getTargetDataLine(format);

				ByteArrayOutputStream out = new ByteArrayOutputStream();
				int numBytesRead;
				byte[] data = new byte[microphone.getBufferSize() / 5];

				// Begin audio capture.
				microphone.start();

				// Here, stopped is a global boolean set by another thread.
				long ms = System.currentTimeMillis();
				while (System.currentTimeMillis() - ms < 10000) {
					// Read the next chunk of data from the TargetDataLine.
					numBytesRead = microphone.read(data, 0, data.length);
					System.out.println("numBytesRead"+numBytesRead);
					// Save this chunk of data.
					out.write(data, 0, numBytesRead);
				}
				final File file = new File("test.wav");
				System.out.println(file.getAbsolutePath());
				FileUtils.writeByteArrayToFile(file, data);
			}
		}

//        try (Model model = new Model("model");
//                    InputStream ais = AudioSystem.getAudioInputStream(new BufferedInputStream(new FileInputStream("../../python/example/test.wav")));
//                    Recognizer recognizer = new Recognizer(model, 16000)) {
//
//            int nbytes;
//            byte[] b = new byte[4096];
//            while ((nbytes = ais.read(b)) >= 0) {
//                if (recognizer.acceptWaveForm(b, nbytes)) {
//                    System.out.println(recognizer.getResult());
//                } else {
//                    System.out.println(recognizer.getPartialResult());
//                }
//            }
//
//            System.out.println(recognizer.getFinalResult());
//        }
	}

}
