package org.d2ab.function;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.ObjectUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import com.google.common.collect.MultimapUtil;

import freemarker.template.utility.CollectionUtils;
import io.github.toolfactory.narcissus.Narcissus;

class ObjIntPredicateUtilTest {
	@Test
	void testNull() {
		//
		final Method[] ms = ObjIntPredicateUtil.class.getDeclaredMethods();
		//
		Method m = null;
		//
		List<Object> os = null;
		//
		Class<?>[] parameterTyeps;
		//
		Object invokeStaticMethod;
		//
		String toString;
		//
		for (int i = 0; ms != null && i < ms.length; i++) {
			//
			if ((m = ms[i]) == null || !Modifier.isStatic(m.getModifiers()) || m.isSynthetic()
					|| (parameterTyeps = m.getParameterTypes()) == null) {
				//
				continue;
				//
			} // if
				//
			if ((os = ObjectUtils.getIfNull(os, ArrayList::new)) != null) {
				//
				os.clear();
				//
			} // if
				//
			parameterTyeps = m.getParameterTypes();
			//
			for (int j = 0; j < parameterTyeps.length; j++) {
				//
				if (Objects.equals(parameterTyeps[j], Integer.TYPE)) {
					//
					os.add(Integer.valueOf(0));
					//
				} else {
					//
					os.add(null);
					//
				} // if
					//
			} // for
				//
			invokeStaticMethod = Narcissus.invokeStaticMethod(m, os != null ? os.toArray() : null);
			//
			toString = Objects.toString(m);
			//
			if (Objects.equals(Boolean.TYPE, m.getReturnType())) {
				//
				Assertions.assertNotNull(invokeStaticMethod, toString);
				//
			} else {
				//
				Assertions.assertNull(invokeStaticMethod, toString);
				//
			} // if
				//
		} // for
			//
	}
}