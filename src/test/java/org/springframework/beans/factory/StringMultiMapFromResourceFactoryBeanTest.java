package org.springframework.beans.factory;

import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Base64;
import java.util.Base64.Decoder;
import java.util.Collections;
import java.util.Iterator;
import java.util.Objects;
import java.util.function.BiFunction;
import java.util.function.BiPredicate;
import java.util.function.Predicate;

import org.apache.commons.lang3.reflect.FieldUtils;
import org.apache.nutch.util.DeflateUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.CellValue;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.javatuples.Pair;
import org.javatuples.valueintf.IValue0;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.meeuw.functional.TriConsumer;
import org.meeuw.functional.TriPredicate;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.InputStreamSource;
import org.springframework.core.io.Resource;

import com.google.common.collect.ImmutableMultimap;
import com.google.common.collect.Multimap;
import com.google.common.reflect.Reflection;

import io.github.toolfactory.narcissus.Narcissus;

class StringMultiMapFromResourceFactoryBeanTest {

	private static Method METHOD_GET_PHYSICAL_NUMBER_OF_CELLS, METHOD_CREATE_MULTI_MAP, METHOD_GET_STRING1,
			METHOD_GET_STRING2, METHOD_AND, METHOD_TEST_AND_APPLY, METHOD_TEST_AND_ACCEPT = null;

	private static Class<?> CLASS_OBJECT_INT_MAP = null;

	@BeforeAll
	static void beforeAll() throws ReflectiveOperationException {
		//
		final Class<?> clz = StringMultiMapFromResourceFactoryBean.class;
		//
		(METHOD_GET_PHYSICAL_NUMBER_OF_CELLS = clz.getDeclaredMethod("getPhysicalNumberOfCells", Row.class,
				Integer.TYPE)).setAccessible(true);
		//
		(METHOD_CREATE_MULTI_MAP = clz.getDeclaredMethod("createMultimap", Sheet.class, FormulaEvaluator.class,
				IValue0.class, Pair.class)).setAccessible(true);
		//
		(METHOD_GET_STRING1 = clz.getDeclaredMethod("getString", CellValue.class)).setAccessible(true);
		//
		(METHOD_GET_STRING2 = clz.getDeclaredMethod("getString", Cell.class, FormulaEvaluator.class))
				.setAccessible(true);
		//
		(METHOD_AND = clz.getDeclaredMethod("and", Predicate.class, Object.class, Object.class)).setAccessible(true);
		//
		(METHOD_TEST_AND_APPLY = clz.getDeclaredMethod("testAndApply", BiPredicate.class, Object.class, Object.class,
				BiFunction.class, BiFunction.class)).setAccessible(true);
		//
		(METHOD_TEST_AND_ACCEPT = clz.getDeclaredMethod("testAndAccept", TriPredicate.class, Object.class, Object.class,
				Object.class, TriConsumer.class)).setAccessible(true);
		//
		CLASS_OBJECT_INT_MAP = Class
				.forName("org.springframework.beans.factory.StringMultiMapFromResourceFactoryBean$ObjectIntMap");
		//
	}

	private static class IH implements InvocationHandler {

		private Boolean exists, containsKey = null;

		private byte[] contentAsByteArray = null;

		private InputStream inputStream = null;

		private IOException ioException = null;

		private Iterator<?> iterator = null;

		private CellType cellType = null;

		@Override
		public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
			//
			final String methodName = Util.getName(method);
			//
			if (proxy instanceof InputStreamSource) {
				//
				if (Objects.equals(methodName, "getInputStream")) {
					//
					return inputStream;
					//
				} // if
					//
			} else if (method != null && Objects.equals(CLASS_OBJECT_INT_MAP, method.getDeclaringClass())) {
				//
				if (Objects.equals(methodName, "containsKey")) {
					//
					return containsKey;
					//
				} // if
					//
			} // if
				//
			if (proxy instanceof Iterable) {
				//
				if (Objects.equals(methodName, "iterator")) {
					//
					return iterator;
					//
				} // if
					//
			} else if (proxy instanceof Resource) {
				//
				if (Objects.equals(methodName, "exists")) {
					//
					return exists;
					//
				} else if (Objects.equals(methodName, "getContentAsByteArray")) {
					//
					if (ioException != null) {
						//
						throw ioException;
						//
					} // if
						//
					return contentAsByteArray;
					//
				} // if
					//
			} else if (proxy instanceof Cell) {
				//
				if (Objects.equals(methodName, "getCellType")) {
					//
					return cellType;
					//
				} else if (Objects.equals(methodName, "getStringCellValue")) {
					//
					return null;
					//
				} // if
					//
			} // if
				//
			throw new Throwable(methodName);
			//
		}

	}

	private StringMultiMapFromResourceFactoryBean instance = null;

	private IH ih = null;

	@BeforeEach
	void beforeEach() {
		//
		instance = new StringMultiMapFromResourceFactoryBean();
		//
		ih = new IH();
		//
	}

	@Test
	void testGetObject() throws Exception {
		//
		Assertions.assertNull(FactoryBeanUtil.getObject(instance));
		//
		if (ih != null) {
			//
			ih.exists = Boolean.TRUE;
			//
		} // if
			//
		setResource(instance, Reflection.newProxy(Resource.class, ih));
		//
		Assertions.assertNull(FactoryBeanUtil.getObject(instance));
		//
		ih.ioException = new IOException();
		//
		Assertions.assertThrows(RuntimeException.class, () -> FactoryBeanUtil.getObject(instance));
		//
		final Decoder decoder = Base64.getDecoder();
		//
		setResource(instance, new ByteArrayResource(DeflateUtils.inflate(decode(decoder,
				"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"))));
		//
		Assertions.assertEquals(ImmutableMultimap.of(), FactoryBeanUtil.getObject(instance));
		//
		Assertions.assertEquals(ImmutableMultimap.of(), FactoryBeanUtil.getObject(instance));
		//
		if (instance != null) {
			//
			instance.setKeyColumnName("k");
			//
			instance.setValueColumnName("v");
			//
			instance.setValueColumnIndex(1);
			//
		} // if
			//
		final Field iValue0 = StringMultiMapFromResourceFactoryBean.class.getDeclaredField("iValue0");
		//
		FieldUtils.writeField(iValue0, instance, null, true);
		//
		Assertions.assertEquals("{k1=[v1]}", Util.toString(FactoryBeanUtil.getObject(instance)));
		//
		setResource(instance, new ByteArrayResource(DeflateUtils.inflate(decode(decoder,
				"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"))));
		//
		FieldUtils.writeField(iValue0, instance, null, true);
		//
		Assertions.assertEquals("{1.0=[2.0]}", Util.toString(FactoryBeanUtil.getObject(instance)));
		//
		setResource(instance, new ByteArrayResource(DeflateUtils.inflate(decode(decoder,
				"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"))));
		//
		FieldUtils.writeField(iValue0, instance, null, true);
		//
		Assertions.assertEquals("{true=[false]}", Util.toString(FactoryBeanUtil.getObject(instance)));
		//
		setResource(instance, new ByteArrayResource(DeflateUtils.inflate(decode(decoder,
				"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"))));
		//
		FieldUtils.writeField(iValue0, instance, null, true);
		//
		Assertions.assertEquals("{2.0=[3.0]}", Util.toString(FactoryBeanUtil.getObject(instance)));
		//
		setResource(instance, new ByteArrayResource(DeflateUtils.inflate(decode(decoder,
				"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"))));
		//
		FieldUtils.writeField(iValue0, instance, null, true);
		//
		Assertions.assertEquals("{A=[B]}", Util.toString(FactoryBeanUtil.getObject(instance)));
		//
		setResource(instance, new ByteArrayResource(DeflateUtils.inflate(decode(decoder,
				"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"))));
		//
		FieldUtils.writeField(iValue0, instance, null, true);
		//
		Assertions.assertEquals("{false=[true]}", Util.toString(FactoryBeanUtil.getObject(instance)));
		//
		setResource(instance, new ByteArrayResource(DeflateUtils.inflate(decode(decoder,
				"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"))));
		//
		FieldUtils.writeField(iValue0, instance, null, true);
		//
		Assertions.assertEquals("{#DIV/0!=[#DIV/0!]}", Util.toString(FactoryBeanUtil.getObject(instance)));
		//
	}

	private static byte[] decode(final Decoder instance, final String src) {
		return instance != null ? instance.decode(src) : null;
	}

	private static void setResource(final StringMultiMapFromResourceFactoryBean instance, final Resource resource) {
		if (instance != null) {
			instance.setResource(resource);
		}
	}

	@Test
	void testGetObjectType() {
		//
		Assertions.assertEquals(Multimap.class, FactoryBeanUtil.getObjectType(instance));
		//
	}

	@Test
	void testCreateMap() throws Throwable {
		//
		Assertions.assertNull(createMultimap(null, null, null, null));
		//
		final Sheet sheet = Reflection.newProxy(Sheet.class, ih);
		//
		Assertions.assertNull(createMultimap(sheet, null, null, null));
		//
		if (ih != null) {
			//
			ih.iterator = Collections.singleton(null).iterator();
			//
		} // if
			//
		Assertions.assertNull(createMultimap(sheet, null, null, null));
		//
	}

	private static IValue0<Multimap<String, String>> createMultimap(final Sheet sheet,
			final FormulaEvaluator formulaEvaluator, final IValue0<String> keyColumnName,
			final Pair<String, Integer> valueColumnNameAndIndex) throws Throwable {
		try {
			final Object obj = METHOD_CREATE_MULTI_MAP.invoke(null, sheet, formulaEvaluator, keyColumnName,
					valueColumnNameAndIndex);
			if (obj == null) {
				return null;
			} else if (obj instanceof IValue0) {
				return (IValue0) obj;
			}
			throw new Throwable(Util.toString(obj.getClass()));
		} catch (final InvocationTargetException e) {
			throw e.getTargetException();
		}
	}

	@Test
	void testGetString() throws Throwable {
		//
		Assertions.assertNull(getString(null));
		//
		Assertions.assertThrows(IllegalStateException.class,
				() -> getString(Util.cast(CellValue.class, Narcissus.allocateInstance(CellValue.class))));
		//
		Assertions.assertNull(getString(null, null));
		//
		final Cell cell = Reflection.newProxy(Cell.class, ih);
		//
		Assertions.assertThrows(IllegalStateException.class, () -> getString(cell, null));
		//
		if (ih != null) {
			//
			ih.cellType = CellType.BLANK;
			//
		} // if
			//
		Assertions.assertNull(getString(cell, null));
		//
	}

	private static IValue0<String> getString(final CellValue cellValue) throws Throwable {
		try {
			final Object obj = METHOD_GET_STRING1.invoke(null, cellValue);
			if (obj == null) {
				return null;
			} else if (obj instanceof IValue0) {
				return (IValue0) obj;
			}
			throw new Throwable(Util.toString(obj.getClass()));
		} catch (final InvocationTargetException e) {
			throw e.getTargetException();
		}
	}

	private static String getString(final Cell cell, final FormulaEvaluator formulaEvaluator) throws Throwable {
		try {
			final Object obj = METHOD_GET_STRING2.invoke(null, cell, formulaEvaluator);
			if (obj == null) {
				return null;
			} else if (obj instanceof String) {
				return (String) obj;
			}
			throw new Throwable(Util.toString(obj.getClass()));
		} catch (final InvocationTargetException e) {
			throw e.getTargetException();
		}
	}

	@Test
	void testGetPhysicalNumberOfCells() throws Throwable {
		//
		final int zero = 0;
		//
		Assertions.assertEquals(zero, getPhysicalNumberOfCells(null, zero));
		//
	}

	private static int getPhysicalNumberOfCells(final Row instance, final int defaultValue) throws Throwable {
		try {
			final Object obj = METHOD_GET_PHYSICAL_NUMBER_OF_CELLS.invoke(null, instance, defaultValue);
			if (obj instanceof Number) {
				return ((Number) obj).intValue();
			}
			throw new Throwable(obj != null ? Util.toString(obj.getClass()) : null);
		} catch (final InvocationTargetException e) {
			throw e.getTargetException();
		}
	}

	@Test
	void testAnd() throws Throwable {
		//
		Assertions.assertFalse(and(null, null, null));
		//
	}

	private static <T> boolean and(final Predicate<T> predicate, final T a, final T b) throws Throwable {
		try {
			final Object obj = METHOD_AND.invoke(null, predicate, a, b);
			if (obj instanceof Boolean) {
				return ((Boolean) obj).booleanValue();
			}
			throw new Throwable(obj != null ? Util.toString(obj.getClass()) : null);
		} catch (final InvocationTargetException e) {
			throw e.getTargetException();
		}
	}

	@Test
	void testTestAndApply() throws Throwable {
		//
		Assertions.assertNull(testAndApply(null, null, null, null, null));
		//
	}

	private static <T, U, R, E extends Throwable> R testAndApply(final BiPredicate<T, U> predicate, final T t,
			final U u, final BiFunction<T, U, R> functionTrue, final BiFunction<T, U, R> functionFalse)
			throws Throwable {
		try {
			return (R) METHOD_TEST_AND_APPLY.invoke(null, predicate, t, u, functionTrue, functionFalse);
		} catch (final InvocationTargetException e) {
			throw e.getTargetException();
		}
	}

	@Test
	void testTestAndAccept() {
		//
		Assertions.assertDoesNotThrow(() -> testAndAccept(null, null, null, null, null));
		//
		Assertions.assertDoesNotThrow(() -> testAndAccept((a, b, c) -> true, null, null, null, null));
		//
	}

	private static <A, B, C> void testAndAccept(final TriPredicate<A, B, C> predicate, final A a, final B b, final C c,
			final TriConsumer<A, B, C> consumer) throws Throwable {
		try {
			METHOD_TEST_AND_ACCEPT.invoke(null, predicate, a, b, c, consumer);
		} catch (final InvocationTargetException e) {
			throw e.getTargetException();
		}
	}

	@Test
	void testObjectIntMap() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
		//
		final Method containsKey = CLASS_OBJECT_INT_MAP != null
				? CLASS_OBJECT_INT_MAP.getDeclaredMethod("containsKey", CLASS_OBJECT_INT_MAP, Object.class)
				: null;
		//
		Assertions.assertEquals(Boolean.FALSE, containsKey != null ? containsKey.invoke(null, null, null) : null);
		//
		Assertions.assertEquals(ih != null ? ih.containsKey = Boolean.FALSE : null,
				containsKey != null ? containsKey.invoke(null, Reflection.newProxy(CLASS_OBJECT_INT_MAP, ih), null)
						: null);
		//
	}

	@Test
	void testIH() throws ClassNotFoundException, NoSuchMethodException {
		//
		final Class<?> clz = Class
				.forName("org.springframework.beans.factory.StringMultiMapFromResourceFactoryBean$IH");
		//
		final InvocationHandler ih = Util.cast(InvocationHandler.class, Narcissus.allocateInstance(clz));
		//
		if (ih != null) {
			//
			Assertions.assertThrows(Throwable.class, () -> ih.invoke(null, null, null));
			//
			final Object objectIntMap = Reflection.newProxy(CLASS_OBJECT_INT_MAP, ih);
			//
			Assertions.assertThrows(Throwable.class, () -> ih.invoke(objectIntMap, null, null));
			//
			final Method containsKey = CLASS_OBJECT_INT_MAP != null
					? CLASS_OBJECT_INT_MAP.getDeclaredMethod("containsKey", CLASS_OBJECT_INT_MAP, Object.class)
					: null;
			//
			Assertions.assertThrows(Throwable.class, () -> ih.invoke(objectIntMap, containsKey, null));
			//
			Assertions.assertThrows(Throwable.class, () -> ih.invoke(objectIntMap, containsKey, new Object[] {}));
			//
			final Method get = CLASS_OBJECT_INT_MAP != null
					? CLASS_OBJECT_INT_MAP.getDeclaredMethod("get", Object.class)
					: null;
			//
			Assertions.assertThrows(Throwable.class, () -> ih.invoke(objectIntMap, get, null));
			//
			Assertions.assertThrows(Throwable.class, () -> ih.invoke(objectIntMap, get, new Object[] {}));
			//
			final Method put = CLASS_OBJECT_INT_MAP != null
					? CLASS_OBJECT_INT_MAP.getDeclaredMethod("put", Object.class, Integer.TYPE)
					: null;
			//
			Assertions.assertThrows(Throwable.class, () -> ih.invoke(objectIntMap, put, null));
			//
			Assertions.assertThrows(Throwable.class, () -> ih.invoke(objectIntMap, put, new Object[] {}));
			//
		} // if
			//
	}

}